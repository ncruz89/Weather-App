{"mappings":"AAAA,MAAMA,cAAgBC,SAASC,cAAc,SACvCC,cAAgBF,SAASC,cAAc,SACvCE,cAAgBH,SAASC,cAAc,eACvCG,qBAAuBJ,SAASC,cAAc,iBAC9CI,WAAaL,SAASC,cAAc,gBACpCK,UAAYN,SAASC,cAAc,eACnCM,UAAYP,SAASC,cAAc,kBAEzC,IAAIO,WAAa,GAGjB,MAAMC,QAAU,CACdC,QAAS,mCACTC,QAAS,G,aAwBK,SAAKC,EAAKC,EAAA,YACtBC,MAAM,qDAAwCF,WAAAC,WAAAE,KAAAL,WAAAM,MAAAC,KAAAC,SAAAF,MAAAG,GAAAJ,KAAAK,eAAAD,EAAAN,KAAAQ,OAAAC,GAAAC,QAAAC,IAAAF,EAAA,O,iBAWrC,SAAcH,EAAAN,GACvBU,QAAAC,IAAAL,GAIA,MAAAM,KAAQA,GAACN,GACTO,KAAQA,EAAKC,YAACA,GAAMR,EAAeV,QAAI,IACxCmB,OAAAC,YAAAV,EAAAW,MACDC,SAAAZ,EAAAa,KACAhC,SAAQC,cAAY,SAAAgC,UAAA,cAAAR,IAClBzB,SAAKC,cAAiB,SAAOiC,IAAA,oCAAAR,QAC7B1B,SAAAC,cAAuB,gBAAgBgC,UAAEN,EACzC5B,cAAaoC,UAAUC,KAAMC,MAAAT,GAAA,iBAAAf,EAAA,sBAC7Bb,SAAKC,cAAa,aAAYgC,UAAA,aAAAJ,KAC9B3B,cAAU+B,UAAW,eAAAG,KAAAC,MAAAN,IAAA,aAAAlB,EAAA,iBACtBb,SAAAC,cAAA,YAAAqC,UAAAC,OAAA,WACDvC,SAAAwC,KAAAC,MAAAC,gBAAA,+CAAAjB,2CAEF,EAEEkB,OAAQ,WACPrC,UAAAsC,QAEKzC,cAACmC,UAAiBC,OAAS,UACjC/B,WAAeF,UAAAsC,MACX7B,KAAK8B,aAAYrC,YACpBF,UAAAsC,MAAA,GAEH,G,UAGME,iBAAe,SAAS,W,QACtBH,Q,aAEJG,iBAAQ,SAAa,SAAYxB,G,QAC5BE,IAAKF,GACL,UAALA,EAAAyB,KAAmBtC,QAAQkC,Q,kBAG5BG,iBAAA,oBACAvB,QAAAC,IAAAhB,YAEHO,KAAAuB,UAAAU,SAAA,WACOjC,KAAAuB,UAAgBC,OAAO,UAC5BlC,WAAM8B,UAAc,UAClB1B,QAAOoC,aAAYrC,aACjBO,KAASuB,UAACU,SAAY,Y,KAIrBV,UAAAW,IAAA,UACH5C,WAAA8B,UAAA,SACF1B,QAAAoC,aAAArC,WAAgC,U,4BAIpB,QAAU,YAOhB0C,iB,UAEAC,QAPF,IAAMC,SAAS,SAAMC,EAAOC,GAC5BC,UAAQC,YAAYC,oBAAAC,GAAAL,EAAAK,KAAAC,GAAAL,EAAAK,I,KAOnBC,SAAAC,EAAAC,UAAAC,GAAAZ,EAAAa,OACDzC,QAAOC,IAAGqC,EAAME,GAChB,MAAAE,QAAqBnD,MAAK,uBAAA+C,KAAAE,YAE1B,GADAxC,QAAQC,IAAAyC,IACDA,EAAKC,GAAA,CAIL,GAHP3C,QAAYC,IAAIyC,GAGT,MAAAA,EAAAE,OAAA,OAAAC,OAAAC,SAAAC,SACV,UAAAC,MAAA,qC","sources":["js/script.js"],"sourcesContent":["const tempContainer = document.querySelector(\".temp\");\r\nconst windContainer = document.querySelector(\".wind\");\r\nconst unitToggleBtn = document.querySelector(\".toggle-btn\");\r\nconst ToggleBtnInnerCircle = document.querySelector(\".inner-circle\");\r\nconst unitHeader = document.querySelector(\".unit-header\");\r\nconst searchBar = document.querySelector(\".search-bar\");\r\nconst searchBtn = document.querySelector(\".search button\");\r\n\r\nlet currSearch = \"\";\r\n\r\n// weather class\r\nconst weather = {\r\n  api_key: \"1d0a5272af38a018174b126e2c5e4226\",\r\n  locData: {},\r\n\r\n  /**\r\n   * fetch weather simply fetches weather data from openweathermap api\r\n   *\r\n   * @param {String} city - city name to be searched\r\n   * @param {String} [unit = 'imperial']- units to be used in weather. default imperial units\r\n   */\r\n  fetchWeather: function (city, unit = \"imperial\") {\r\n    fetch(\r\n      `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=${unit}&appid=${this.api_key}`\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => this.displayWeather(data, unit))\r\n      .catch((e) => console.log(e, \"ðŸ’¥\"));\r\n  },\r\n  /**\r\n   * function that displays all the weather information for the client\r\n   *\r\n   * @param {Object} data - an object containing the response data from openweathermap api fetch\r\n   * @param {String} unit - the current units being used\r\n   */\r\n  displayWeather: function (data, unit) {\r\n    console.log(data);\r\n    const { name } = data;\r\n    const { icon, description } = data.weather[0];\r\n    const { temp, humidity } = data.main;\r\n    const { speed } = data.wind;\r\n\r\n    document.querySelector(\".city\").innerText = `Weather in ${name}`;\r\n    document.querySelector(\r\n      \".icon\"\r\n    ).src = `http://openweathermap.org/img/wn/${icon}.png`;\r\n    document.querySelector(\".description\").innerText = description;\r\n    tempContainer.innerHTML =\r\n      Math.round(temp) + `${unit === \"imperial\" ? \" &#x2109\" : \" &#8451\"}`;\r\n    document.querySelector(\".humidity\").innerText = `Humidity: ${humidity}%`;\r\n    windContainer.innerText =\r\n      \"Wind speed: \" +\r\n      Math.round(speed) +\r\n      `${unit === \"imperial\" ? \" mp/h\" : \" km/h\"}`;\r\n    document.querySelector(\".weather\").classList.remove(\"loading\");\r\n    document.body.style.backgroundImage = `url('https://source.unsplash.com/1920x1080/?${name}&content_filter=high&topics=id_or_slug')`;\r\n  },\r\n  // function that grabs search bar value and sends it to fetchWeather() function in weather class\r\n  search: function () {\r\n    if (!searchBar.value) return;\r\n    unitToggleBtn.classList.remove(\"active\");\r\n    currSearch = searchBar.value;\r\n    this.fetchWeather(currSearch);\r\n    searchBar.value = \"\";\r\n  },\r\n};\r\n\r\n// listen to click on search or enter button to call weather.search()\r\nsearchBtn.addEventListener(\"click\", function () {\r\n  weather.search();\r\n});\r\n\r\ndocument.addEventListener(\"keyup\", function (e) {\r\n  console.log(e);\r\n  if (e.key === \"Enter\") weather.search();\r\n});\r\n\r\n// toggle button that switches between metric and imperial units\r\nunitToggleBtn.addEventListener(\"click\", function () {\r\n  console.log(currSearch);\r\n  if (this.classList.contains(\"active\")) {\r\n    this.classList.remove(\"active\");\r\n    unitHeader.innerHTML = \"&#x2109\";\r\n    weather.fetchWeather(currSearch);\r\n  } else if (!this.classList.contains(\"active\")) {\r\n    this.classList.add(\"active\");\r\n    unitHeader.innerHTML = \"&#8451\";\r\n    weather.fetchWeather(currSearch, \"metric\");\r\n  }\r\n});\r\n\r\n// on app start grab user location data\r\nwindow.addEventListener(\"load\", function () {\r\n  const getLocation = function () {\r\n    return new Promise(function (resolve, reject) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => resolve(position),\r\n        (err) => reject(err)\r\n      );\r\n    });\r\n  };\r\n  // reverse geocode user location\r\n  const location = async function () {\r\n    try {\r\n      const pos = await getLocation();\r\n      const { latitude: lat, longitude: lng } = pos.coords;\r\n      console.log(lat, lng);\r\n      const revGeo = await fetch(`https://geocode.xyz/${lat},${lng}?json=1`);\r\n      console.log(revGeo);\r\n      if (!revGeo.ok) {\r\n        console.log(revGeo);\r\n        // geocode.xyz likes to throw 403 errors for a reason i couldn't find on client side\r\n        // here's a work around\r\n        if (revGeo.status === 403) return window.location.reload();\r\n        throw new Error(\"Problem getting your location data\");\r\n      }\r\n      locData = await revGeo.json();\r\n      currSearch = locData.city;\r\n      weather.fetchWeather(currSearch);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  location();\r\n});\r\n"],"names":["tempContainer","document","querySelector","windContainer","unitToggleBtn","ToggleBtnInnerCircle","unitHeader","searchBar","searchBtn","currSearch","weather","api_key","locData","city","unit","fetch","this","then","response","json","data","displayWeather","catch","e","console","log","name","icon","description","temp","humidity","main","speed","wind","innerText","src","innerHTML","Math","round","classList","remove","body","style","backgroundImage","search","value","fetchWeather","addEventListener","key","contains","add","async","pos","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","err","latitude","lat","longitude","lng","coords","revGeo","ok","status","window","location","reload","Error"],"version":3,"file":"index.db346c5f.js.map"}